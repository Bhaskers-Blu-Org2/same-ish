["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Number",["^ ","~$MAX_VALUE",["^ "]],"~$Infinity",["^ "],"~$Float32Array",["^ "],"~$ArrayBuffer",["^ "],"~$DataView",["^ ","~$prototype",["^ ","~$setFloat64",["^ "],"~$getUint32",["^ "],"~$setUint32",["^ "],"~$getFloat64",["^ "],"~$setFloat32",["^ "]]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$same.platform","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$bit-diff-float",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^C","~:line",88,"~:column",7,"~:end-line",88,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^Q",[["~$f1","~$f2"]]]]],"~:doc","Difference between two floats in ULPs (i.e. number of representable numbers between them + 1)."],"^B","~$same.platform/bit-diff-float","~:variadic",false,"^K","same/platform.cljc","^O",21,"~:method-params",["^Q",[["^S","^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^M",1,"^L",88,"^N",88,"~:max-fixed-arity",2,"~:fn-var",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Difference between two floats in ULPs (i.e. number of representable numbers between them + 1)."],"~$infinity",["^ ","^B","~$same.platform/infinity","^K","same/platform.cljc","^L",10,"^M",1,"^N",10,"^O",14,"^J",["^ ","^K","^C","^L",10,"^M",6,"^N",10,"^O",14],"~:tag","~$js"],"~$sign",["^ ","^I",null,"^J",["^ ","^K","^C","^L",20,"^M",7,"^N",20,"^O",11,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Return the sign of `f` (+1 if positive, -1 if negative, 0 if zero or NaN if NaN)."],"^B","~$same.platform/sign","^W",false,"^K","same/platform.cljc","^O",11,"^X",["^Q",[["~$f"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",20,"^N",20,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Return the sign of `f` (+1 if positive, -1 if negative, 0 if zero or NaN if NaN)."],"~$is-array?",["^ ","^I",null,"^J",["^ ","^K","^C","^L",14,"^M",7,"^N",14,"^O",16,"^P",["^Q",["^R",["^Q",[["~$a"]]]]],"^U","Return true if `a` is an array."],"^B","~$same.platform/is-array?","^W",false,"^K","same/platform.cljc","^O",16,"^X",["^Q",[["~$a"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",14,"^N",14,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["~$a"]]]]],"^U","Return true if `a` is an array."],"~$ulp*",["^ ","^I",null,"^J",["^ ","^K","^C","^L",45,"^M",11,"^N",45,"^O",15,"~:private",true,"^P",["^Q",["^R",["^Q",[["~$f"]]]]]],"^1:",true,"^B","~$same.platform/ulp*","^W",false,"^K","same/platform.cljc","^O",15,"^X",["^Q",[["~$f"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",4,"^L",45,"^N",45,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["~$f"]]]]]],"~$to-float",["^ ","^I",null,"^J",["^ ","^K","^C","^L",36,"^M",7,"^N",36,"^O",15,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Round `f` to a single precision (32-bit) float."],"^B","~$same.platform/to-float","^W",false,"^K","same/platform.cljc","^O",15,"^X",["^Q",[["~$f"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",36,"^N",36,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Round `f` to a single precision (32-bit) float."],"~$bit-diff-double",["^ ","^I",null,"^J",["^ ","^K","^C","^L",75,"^M",7,"^N",75,"^O",22,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Difference between two doubles in ULPs (i.e. number of representable numbers between them + 1)."],"^B","~$same.platform/bit-diff-double","^W",false,"^K","same/platform.cljc","^O",22,"^X",["^Q",[["^S","^T"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",75,"^N",75,"^[",2,"^10",true,"^P",["^Q",["^R",["^Q",[["^S","^T"]]]]],"^U","Difference between two doubles in ULPs (i.e. number of representable numbers between them + 1)."],"~$max-value",["^ ","^B","~$same.platform/max-value","^K","same/platform.cljc","^L",6,"^M",1,"^N",6,"^O",15,"^J",["^ ","^K","^C","^L",6,"^M",6,"^N",6,"^O",15],"^13","^14"],"~$is-infinite?",["^ ","^I",null,"^J",["^ ","^K","^C","^L",30,"^M",7,"^N",30,"^O",19,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Return true if `f` is infinite."],"^B","~$same.platform/is-infinite?","^W",false,"^K","same/platform.cljc","^O",19,"^X",["^Q",[["~$f"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",30,"^N",30,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Return true if `f` is infinite."],"~$ulp",["^ ","^I",null,"^J",["^ ","^K","^C","^L",67,"^M",7,"^N",67,"^O",10,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Units in the Last Place (ULP) of `f` (difference between f and the next largest representable number)."],"^B","~$same.platform/ulp","^W",false,"^K","same/platform.cljc","^O",10,"^X",["^Q",[["~$f"]]],"^Y",null,"^Z",["^Q",[null,null]],"^M",1,"^L",67,"^N",67,"^[",1,"^10",true,"^P",["^Q",["^R",["^Q",[["~$f"]]]]],"^U","Units in the Last Place (ULP) of `f` (difference between f and the next largest representable number)."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^A",["~:else"]],"~:order",["^1I"]],"^U","Platform-specific code, to try to minimise reader conditionals in the rest of the codebase."]
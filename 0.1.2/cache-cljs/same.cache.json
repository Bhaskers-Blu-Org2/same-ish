["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$same","~:imports",null,"~:requires",["^ ","~$same.compare","^;","~$same.diff","^<","~$ish","~$same.ish","^>","^>"],"~:uses",["^ ","~$diff","^<","^=","^>","~$near-zero","^;"],"~:defs",["^ ","~$ish?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^8","~:line",10,"~:column",7,"~:end-line",10,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^L",[["~$expected","~$&","~$actuals"]]]]],"~:doc","Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^L",["^N","^O"]]],"^K",["^L",[["^N","~$&","^O"]]],"~:arglists-meta",["^L",[null]]]],"^7","~$same/ish?","^R",true,"^F","same.cljc","^J",11,"^Q",["^ ","^R",true,"^S",1,"^T",[["^L",["^N","^O"]]],"^K",["^L",[["^N","~$&","^O"]]],"^U",["^L",[null]]],"^T",[["^L",["^N","^O"]]],"~:protocol-impl",null,"^U",["^L",[null]],"^H",1,"^G",10,"^I",10,"^S",1,"~:fn-var",true,"^K",["^L",[["^N","~$&","^O"]]],"^P","Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```"],"~$zeroish?",["^ ","^D",null,"^E",["^ ","^F","^8","^G",30,"^H",7,"^I",30,"^J",15,"^K",["^L",["^M",["^L",[["~$val","~$&",["^ ","~:keys",["~$max-diff"],"~:or",["^ ","^10",1000]]]]]]],"^P","Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :max-diff 1e6)\n  ```","^Q",["^ ","^R",true,"^S",1,"^T",[["^L",["^Z",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^K",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^U",["^L",[null]]]],"^7","~$same/zeroish?","^R",true,"^F","same.cljc","^J",15,"^Q",["^ ","^R",true,"^S",1,"^T",[["^L",["^Z",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^K",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^U",["^L",[null]]],"^T",[["^L",["^Z",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^W",null,"^U",["^L",[null]],"^H",1,"^G",30,"^I",30,"^S",1,"^X",true,"^K",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^P","Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :max-diff 1e6)\n  ```"],"~$not-zeroish?",["^ ","^D",null,"^E",["^ ","^F","^8","^G",39,"^H",7,"^I",39,"^J",19,"^K",["^L",["^M",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]]]],"^P","Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :max-diff 1e6)\n  ```","^Q",["^ ","^R",true,"^S",1,"^T",[["^L",["^Z",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^K",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^U",["^L",[null]]]],"^7","~$same/not-zeroish?","^R",true,"^F","same.cljc","^J",19,"^Q",["^ ","^R",true,"^S",1,"^T",[["^L",["^Z",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^K",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^U",["^L",[null]]],"^T",[["^L",["^Z",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^W",null,"^U",["^L",[null]],"^H",1,"^G",39,"^I",39,"^S",1,"^X",true,"^K",["^L",[["^Z","~$&",["^ ","^[",["^10"],"^11",["^ ","^10",1000]]]]],"^P","Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :max-diff 1e6)\n  ```"],"~$set-comparator!",["^ ","^D",null,"^E",["^ ","^F","^8","^G",47,"^H",7,"^I",47,"^J",22,"^K",["^L",["^M",["^L",[["~$comparator"]]]]],"^P","Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```"],"^7","~$same/set-comparator!","^R",false,"^F","same.cljc","^J",22,"^T",["^L",[["^16"]]],"^W",null,"^U",["^L",[null,null]],"^H",1,"^G",47,"^I",47,"^S",1,"^X",true,"^K",["^L",["^M",["^L",[["^16"]]]]],"^P","Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```"],"~$with-comparator",["^ ","^D",null,"^E",["^ ","^F","^8","^J",26,"^Q",["^ ","^R",true,"^S",3,"^T",[["^L",["~$&form","~$&env","^16","~$body"]]],"^K",["^L",[["^19","^1:","^16","~$&","^1;"]]],"^U",["^L",[null]]],"^H",11,"^G",58,"~:macro",true,"^I",58,"^K",["^L",["^M",["^L",[["^16","~$&","^1;"]]]]],"^P","Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```"],"^7","~$same/with-comparator","^R",true,"^F","same.cljc","^J",26,"^Q",["^ ","^R",true,"^S",3,"^T",[["^L",["^19","^1:","^16","^1;"]]],"^K",["^L",[["^19","^1:","^16","~$&","^1;"]]],"^U",["^L",[null]]],"^T",[["^L",["^19","^1:","^16","^1;"]]],"^W",null,"^U",["^L",[null]],"^H",1,"^G",58,"^1<",true,"^I",58,"^S",3,"^X",false,"^K",["^L",[["^19","^1:","^16","~$&","^1;"]]],"^P","Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```"]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:max-diff","~$cljs.core/binding","~$same.ish/*comparator*"]],"~:order",["^1A","^1B","^1C"]],"^P","Main public API namespace."]
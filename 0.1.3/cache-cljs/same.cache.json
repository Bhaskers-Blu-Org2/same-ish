["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$same","~:imports",null,"~:requires",["^ ","~$same.compare","^;","~$same.diff","^<","~$ish","~$same.ish","^>","^>"],"~:uses",["^ ","~$diff","^<","^=","^>","~$near-zero","^;"],"~:defs",["^ ","~$ish?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^8","~:line",10,"~:column",7,"~:end-line",10,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^L",[["~$expected","~$&","~$actuals"]]]]],"~:doc","Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^L",["^N","^O"]]],"^K",["^L",[["^N","~$&","^O"]]],"~:arglists-meta",["^L",[null]]]],"^7","~$same/ish?","^F","same.cljc","^J",11,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",[["^L",["^N","^O"]]],"^K",["^L",[["^N","~$&","^O"]]],"^V",["^L",[null]]],"^U",[["^L",["^N","^O"]]],"~:protocol-impl",null,"^S",1,"^V",["^L",[null]],"^H",1,"^R",true,"~:methods",[["^ ","^S",1,"^R",true,"~:tag","~$boolean"]],"^G",10,"~:ret-tag","~$any","^I",10,"^T",1,"~:fn-var",true,"^K",["^L",[["^N","~$&","^O"]]],"^P","Compare one or more values to an expected value, returning true if they are the same-ish.\n  The values can be numbers:\n  ```klipse\n  (let [two (Math/pow (Math/sqrt 2) 2)]\n    [(== 2 two) (ish? 2 two)])\n  ```\n  or data structures:\n  ```klipse\n  (ish? {:a 1 :b [1.99999999999999 3]}\n        {:a 1.00000000000001 :b [2 3.0]})\n  ```\n  you can also compare more than one value to the expected value:\n  ```klipse\n  (ish? 1 1.0 0.99999999999999 1.00000000000001 1)\n  ```"],"~$zeroish?",["^ ","^D",null,"^E",["^ ","^F","^8","^G",30,"^H",7,"^I",30,"^J",15,"^K",["^L",["^M",["^L",[["~$val","~$&",["^ ","~:keys",["~$max-diff"],"~:or",["^ ","^16",1000]]]]]]],"^P","Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :max-diff 1e6)\n  ```","^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",[["^L",["^14",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^K",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^V",["^L",[null]]]],"^7","~$same/zeroish?","^F","same.cljc","^J",15,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",[["^L",["^14",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^K",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^V",["^L",[null]]],"^U",[["^L",["^14",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^X",null,"^S",1,"^V",["^L",[null]],"^H",1,"^R",true,"^Y",[["^ ","^S",1,"^R",true,"^Z","^["]],"^G",30,"^10","^11","^I",30,"^T",1,"^12",true,"^K",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^P","Compare a numeric value to zero, returning true if close.\n  ```klipse\n  (zeroish? 0.0000000001\n            :max-diff 1e6)\n  ```"],"~$not-zeroish?",["^ ","^D",null,"^E",["^ ","^F","^8","^G",39,"^H",7,"^I",39,"^J",19,"^K",["^L",["^M",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]]]],"^P","Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :max-diff 1e6)\n  ```","^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",[["^L",["^14",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^K",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^V",["^L",[null]]]],"^7","~$same/not-zeroish?","^F","same.cljc","^J",19,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",[["^L",["^14",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^K",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^V",["^L",[null]]],"^U",[["^L",["^14",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^X",null,"^S",1,"^V",["^L",[null]],"^H",1,"^R",true,"^Y",[["^ ","^S",1,"^R",true,"^Z","^["]],"^G",39,"^10","^11","^I",39,"^T",1,"^12",true,"^K",["^L",[["^14","~$&",["^ ","^15",["^16"],"^17",["^ ","^16",1000]]]]],"^P","Compare a numeric value to zero, returning true if not close. Equivalent to `(not (zeroish? ...))`.\n  ```klipse\n  (not-zeroish? 3 :max-diff 1e6)\n  ```"],"~$set-comparator!",["^ ","^D",null,"^E",["^ ","^F","^8","^G",47,"^H",7,"^I",47,"^J",22,"^K",["^L",["^M",["^L",[["~$comparator"]]]]],"^P","Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```"],"^7","~$same/set-comparator!","^F","same.cljc","^J",22,"^U",["^L",[["^1<"]]],"^X",null,"^V",["^L",[null,null]],"^H",1,"^R",false,"^G",47,"^10","~$clj-nil","^I",47,"^T",1,"^12",true,"^K",["^L",["^M",["^L",[["^1<"]]]]],"^P","Set the default comparator.\n  ```klipse\n  (set-comparator! (compare-ulp 2.0 100))\n  (ish? 0.1 (-> 2 Math/sqrt (Math/pow 2) (- 1.9)))\n  ```"],"~$with-comparator",["^ ","^D",null,"^E",["^ ","^F","^8","^J",26,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^L",[["^L",["^1<","~$body"]]]],"^K",["^L",[["^1<","~$&","^1@"]]],"^V",["^L",[null]]],"^H",11,"^G",58,"~:macro",true,"^I",58,"^K",["^L",["^M",["^L",[["^1<","~$&","^1@"]]]]],"^P","Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```"],"^7","~$same/with-comparator","^F","same.cljc","^J",26,"^Q",["^ ","^R",true,"^S",1,"^T",1,"^U",["^L",[["^L",["^1<","^1@"]]]],"^K",["^L",[["^1<","~$&","^1@"]]],"^V",["^L",[null]]],"^U",["^L",[["^L",["^1<","^1@"]]]],"^X",null,"^S",1,"^V",["^L",[null]],"^H",1,"^R",true,"^Y",[["^ ","^S",1,"^R",true,"^Z",["^6",["~$seq","~$cljs.core/IList"]]]],"^G",58,"^1A",true,"^10","^11","^I",58,"^T",1,"^12",false,"^K",["^L",[["^1<","~$&","^1@"]]],"^P","Temporarily replace the default comparator.\n  ```klipse\n  (with-comparator (compare-ulp 100.0 1e9)\n    (ish? 1.0 0.9999999))\n  ```\n  ```klipse\n  (with-comparator ==\n    (ish? 1.0 0.9999999999999))\n  ```"]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:max-diff","~$cljs.core/binding","~$same.ish/*comparator*"]],"~:order",["^1H","^1I","^1J"]],"^P","Main public API namespace."]